
158 : 오류없음
49,53,64,197 : 작업 안됨
212 : 요건이 숫자만 입력하라는 요건이었음. <> LX메모 : 4  번에서 설정 버턴 클릭시  3  번의  정확한 입력 값이 아니면 입력 하라고 경고메세지 보여줘야 함. 예) 평슬라브 입력값은 숫자만 가능합니다.
     - 4  번에서 설정 버턴 클릭시  3  번의  정확한 입력 값이 아니면 입력 하라고 경고메세지 보여줘야 함. 
       예) 평슬라브 입력값은 숫자만 가능합니다.
265 : 오류조치함



const handleFinish = async () => {
  let values = form.getFieldsValue();
  const checkValues = await form.validateFields();
/////////////////
}

  <Form.Item label="등록번호" name="regstNum"
  rules={[
    {
      required: true,
      message: '등록번호를 입력하세오',
    },
  ]}
  >
  <Input placeholder="등록번호" />
  </Form.Item>
/////////////////////////////////////////////////////
    .ant-table-tbody > tr > td {
      cursor: default !important;
    }
    
/////////////////////

import {
  Modal,
  message
} from 'antd'
const { confirm } = Modal;


    if (radioValue == '') {
      message.warning('pleace choose');
    } else {
      confirm({
        title: '삭제 확인?',
        icon: <ExclamationCircleOutlined />,
        content:
          '삭제하시겠습니까?',
        okText: '확인',
        okType: 'danger',
        cancelText: '취소',
        onOk() {
            dispatch({
              type: 'shpExport/handleDeteleshpExport',
              payload: {
                userCrltsId: radioValue,
              },
            });
            setRadioValue('');
        },
        onCancel() {
          console.log('Cancel');
        },
      });
    }




    confirm({
      title: '저장 확인?',
      icon: <ExclamationCircleOutlined />,
      content:
        '저장하시겠습니까?',
      okText: '확인',
      okType: 'danger',
      cancelText: '취소',
      onOk() {
        dispatch({
          type: 'shpExport/handleSubmitData',
          payload: {
            areaList,
            setcallback: () => {
              console.log(11111);
              dispatch({
                type: 'sigPanel/setChildren',
                payload: {
                  isshow: false,
                  children: <></>,
                },
              });
            },
          },
        });
      },
      onCancel() {
        console.log('Cancel');
      },
    });


    ////////////////////////



        if (entitiesPloy === null) {
      console.log(handlePoint, 'handlePoint---');
      message.warning('필지를 선택하세요11.');
    } else {
      confirm({
        title: '분석 확인?',
        icon: <ExclamationCircleOutlined />,
        content: '분석하시겠습니까?',
        okText: '확인',
        okType: 'danger',
        cancelText: '취소',
        onOk() {
          setIsVisible(true);
          dispatch({
            type: 'slopeAnalysis/setState',
            payload: { loadingVisible: true },
          });
          setTimeout(() => {
            dispatch({
              type: 'slopeAnalysis/startAnalysis',
              payload: {
                width: inputValue ? inputValue : 10,
                callback: (res, pirmit, pos) => {
                  if (res == null) {
                    Modal.warning({
                      title: '알림',
                      content:
                        '영역설정 범위가 한계값을 초과하였습니다. 다시 설정하십시오.',
                      centered: true,
                    });
                    setIsVisible(false);
                    dispatch({
                      type: 'slopeAnalysis/setState',
                      payload: { loadingVisible: false },
                    });
                  } else {
                    dispatch({
                      type: 'slopeAnalysis/setState',
                      payload: { polygonSource: res, polyPirmitSource: pirmit },
                    });
                    dispatch({
                      type: 'slopeAnalysis/getPositionPUN',
                      payload: { lng: pos.lng, lat: pos.lat },
                    });
                    dispatch({
                      type: 'sigPanel/setChildren',
                      payload: {
                        isshow: true,
                        children: <SlopeAnalysisResult></SlopeAnalysisResult>,
                        styles: {
                          width: '400px',
                          position: 'fixed',
                          left: '430px',
                          top: '30px',
                          zIndex: 1200,
                          height: '700px',
                        },
                      },
                    });
                    setIsVisible(false);
                    dispatch({
                      type: 'slopeAnalysis/setState',
                      payload: { loadingVisible: false },
                    });
                  }
                },
              },
            });
          }, 500);
        },
        onCancel() {
          console.log('Cancel');
        },
      });